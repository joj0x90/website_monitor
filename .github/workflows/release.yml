name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - '.env'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Install necessary software components
      - name: Install required software
        run: |
          echo "Installing necessary tools..."
          sudo apt-get update
          sudo apt-get install -y tar build-essential curl python3-pip
          pip install requests
          pip install python-dotenv
          pip install pyinstaller
          
          # Install Just (if not already available)
          if ! command -v just &> /dev/null; then
            echo "Installing Just..."
            curl -sSfL https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          fi
          
          # Install GitHub CLI (gh)
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            sudo apt-get install -y gh
          fi

          echo "temporarily setting fake env-vars"
          echo "APP_NAME=Website-Monitor" >> $GITHUB_ENV
          echo "APP_VERSION=$(cat version.txt)" >> $GITHUB_ENV

      # Set up GitHub CLI authentication
      - name: Configure GitHub CLI authentication
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "GitHub CLI authenticated successfully."

      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Execute "just build" to generate the tar.gz and .env file in dist/ directory
      - name: Build the project
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
        run: |
          just build-targz

      # Read the APP_VERSION from the generated .env file
      - name: Load new APP_VERSION
        id: load_version
        run: |
          # Check if version_file file exists
          if [ ! -f version_file ]; then
            echo "vesion_file file not found!"
            exit 1
          fi
          
          # Extract APP_VERSION from version_file
          export APP_VERSION=VERSION=$(cat version_file)
          echo "APP_VERSION=$APP_VERSION"
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV

      # Compare APP_VERSION with previous release
      - name: Check if APP_VERSION is different from the latest release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: check_version
        run: |
          # Fetch the latest release tag
          latest_release=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "none")
          
          # Log the latest release
          echo "Latest release tag: $latest_release"
          
          # Compare with APP_VERSION
          if [ "$latest_release" = "v$APP_VERSION" ]; then
            echo "APP_VERSION has not changed ($APP_VERSION). Skipping release."
            echo "release_required=false" >> $GITHUB_ENV
          else
            echo "APP_VERSION has changed to $APP_VERSION. A new release is required."
            echo "release_required=true" >> $GITHUB_ENV
          fi

      # Conditionally create a new release if APP_VERSION is different
      - name: Create a new release
        if: env.release_required == 'true'
        uses: softprops/action-gh-release@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v$APP_VERSION
          name: Release v$APP_VERSION
          files: ./*.tar.gz
